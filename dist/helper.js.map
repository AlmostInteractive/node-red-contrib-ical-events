{"version":3,"sources":["../src/helper.ts"],"names":[],"mappings":"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","file":"helper.js","sourcesContent":["import moment = require('moment');\r\nimport { loadEventsForDay } from './icloud';\r\nimport { CalDav } from './caldav';\r\n\r\nconst nodeIcal = require('node-ical');\r\n\r\nexport interface Job {\r\n    id: string,\r\n    cronjob: any\r\n}\r\n\r\nexport interface CalEvent {\r\n    summary?: string,\r\n    topic?: string,\r\n    location?: string,\r\n    eventStart?: Date\r\n    eventEnd?: Date,\r\n    date?: string,\r\n    event?: string,\r\n    description?: string,\r\n    id?: string,\r\n    allDay?: boolean,\r\n    rule?: string,\r\n    on?: boolean,\r\n    off?: boolean,\r\n    countdown?: object,\r\n    calendarName?: string\r\n\r\n}\r\n\r\nexport function getTimezoneOffset(date) {\r\n    var offset = 0;\r\n    var zone = moment.tz.zone(moment.tz.guess());\r\n    if (zone && date) {\r\n        offset = zone.utcOffset(date.getTime());\r\n    }\r\n    return offset;\r\n}\r\n\r\nexport function addOffset(time, offset) {\r\n    return new Date(time.getTime() + offset * 60 * 1000);\r\n}\r\n\r\nexport function countdown(date) {\r\n\r\n    var seconds = (date.getTime() - new Date().getTime()) / 1000;\r\n    seconds = Number(seconds);\r\n\r\n    var d = Math.floor(seconds / (3600 * 24));\r\n    var h = Math.floor(seconds % (3600 * 24) / 3600);\r\n    var m = Math.floor(seconds % 3600 / 60);\r\n    var s = Math.floor(seconds % 60);\r\n\r\n    return {\r\n        days: d,\r\n        hours: h,\r\n        minutes: m,\r\n        seconds: s,\r\n    };\r\n}\r\n\r\nexport function getICal(node, urlOrFile, config, callback) {\r\n    if (config.caldav && config.caldav === 'icloud') {\r\n        const now = moment();\r\n        const when = now.toDate();\r\n\r\n        loadEventsForDay(moment(when), {\r\n            url: urlOrFile,\r\n            username: config.username,\r\n            password: config.password,\r\n            type: 'caldav',\r\n            endpreview: node.endpreview || 1,\r\n            pastview: node.pastview || 0,\r\n            endpreviewUnits: node.endpreviewUnits || 'days',\r\n            pastviewUnits: node.pastviewUnits || 'days',\r\n        }, (list, start, end) => {\r\n\r\n            callback && callback(null, list);\r\n        });\r\n    } else if (config.caldav && JSON.parse(config.caldav) === true) {\r\n        node.debug('caldav');\r\n        CalDav(node, config).then((data) => {\r\n            let retEntries = {};\r\n            for (let events of data) {\r\n                for (let event in events) {\r\n                    var ev = events[event];\r\n                    retEntries[ev.uid] = ev;\r\n                }\r\n            }\r\n            callback(null, retEntries);\r\n        });\r\n    } else {\r\n        if (urlOrFile.match(/^https?:\\/\\//)) {\r\n            let header = {};\r\n            let username = node.config.username;\r\n            let password = node.config.password;\r\n\r\n            if (username && password) {\r\n                var auth = 'Basic ' + Buffer.from(username + ':' + password).toString('base64');\r\n                header = {\r\n                    headers: {\r\n                        'Authorization': auth,\r\n                    },\r\n                };\r\n            }\r\n\r\n            nodeIcal.fromURL(node.config.url, header, (err, data) => {\r\n                if (err) {\r\n                    callback && callback(err, null);\r\n                    return;\r\n                }\r\n                callback && callback(null, data);\r\n            });\r\n        } else {\r\n            nodeIcal.parseFile(node.config.url, (err, data) => {\r\n                if (err) {\r\n                    callback && callback(err, null);\r\n                    return;\r\n                }\r\n                callback && callback(null, data);\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\n"]}