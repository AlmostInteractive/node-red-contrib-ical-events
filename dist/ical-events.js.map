{"version":3,"sources":["../src/ical-events.ts"],"names":[],"mappings":"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","file":"ical-events.js","sourcesContent":["\r\nimport { Red, Node } from 'node-red';\r\nimport * as crypto from \"crypto-js\";\r\nimport { CronJob } from 'cron';\r\nimport { CronTime } from 'cron';\r\nimport * as parser from 'cron-parser';\r\nimport { Config } from './ical-config';\r\nimport { getICal, CalEvent, countdown } from './helper';\r\n\r\nmodule.exports = function (RED: Red) {\r\n    let newCronJobs = new Map();\r\n\r\n    function eventsNode(config: any) {\r\n        RED.nodes.createNode(this, config);\r\n        let configNode = RED.nodes.getNode(config.confignode) as unknown as Config;\r\n        let node = this;\r\n        this.config = configNode;\r\n        try {\r\n            node.on('input', () => {\r\n                cronCheckJob(this, config);\r\n            });\r\n\r\n            node.on('close', () => {\r\n                node.debug(\"cron stopped\")\r\n                let startedCronJobs = node.context().get('startedCronJobs');\r\n                if (startedCronJobs) {\r\n                    for (let key in startedCronJobs) {\r\n                        if (startedCronJobs.hasOwnProperty(key)) {\r\n                            node.debug(key + \" stopped\")\r\n                            startedCronJobs[key].stop();\r\n                        }\r\n                    }\r\n                    node.context().get('startedCronJobs').clear();\r\n                }\r\n\r\n            });\r\n\r\n            if (config.cron && config.cron !== \"\") {\r\n                parser.parseExpression(config.cron);\r\n\r\n                node.job = new CronJob(config.cron || '0 0 * * * *', cronCheckJob.bind(null, node, config));\r\n                node.job.start();\r\n\r\n                node.on('close', () => {\r\n                    node.job.stop();\r\n                });\r\n            }\r\n        }\r\n        catch (err) {\r\n            node.error('Error: ' + err.message);\r\n            node.status({ fill: \"red\", shape: \"ring\", text: err.message })\r\n        }\r\n    }\r\n\r\n\r\n    function cronCheckJob(node: any, config: any) {\r\n        if (node.job && node.job.running) {\r\n            node.status({ fill: \"green\", shape: \"dot\", text: node.job.nextDate().toISOString() });\r\n        }\r\n        else {\r\n            node.status({});\r\n        }\r\n        var dateNow = new Date();\r\n        var possibleUids = [];\r\n        getICal(node, node.config.url, node.config, (err, data) => {\r\n            if (err || !data) {\r\n                return;\r\n            }\r\n\r\n            node.debug('Ical read successfully ' + config.url);\r\n            if (data) {\r\n                for (let k in data) {\r\n                    if (data.hasOwnProperty(k)) {\r\n                        var ev = data[k];\r\n\r\n                        const eventStart = new Date(ev.start);\r\n                        const eventEnd = new Date(ev.end);\r\n                        if (ev.type == 'VEVENT') {\r\n                            if (eventStart > dateNow) {\r\n                                let uid = crypto.MD5(ev.created + ev.summary + \"start\").toString();\r\n                                if (ev.uid) {\r\n                                    uid = ev.uid + \"start\";\r\n                                }\r\n                                possibleUids.push(uid);\r\n                                const event: CalEvent = {\r\n                                    summary: ev.summary,\r\n                                    topic: ev.summary,\r\n                                    id: uid,\r\n                                    location: ev.location,\r\n                                    eventStart: new Date(ev.start),\r\n                                    eventEnd: new Date(ev.end),\r\n                                    description: ev.description,\r\n                                    calendarName: ev.calendarName, \r\n                                    countdown: countdown(new Date(ev.start))\r\n                                }\r\n\r\n                                if (config.offset) {\r\n                                    eventStart.setMinutes(eventStart.getMinutes() + parseInt(config.offset));\r\n                                } else {\r\n                                    eventStart.setMinutes(eventStart.getMinutes() - 1);\r\n                                }\r\n\r\n                                const job2 = new CronJob(eventStart, cronJobStart.bind(null, event, node));\r\n                                let startedCronJobs = node.context().get('startedCronJobs') || {};\r\n                                if (!newCronJobs.has(uid) && !startedCronJobs[uid]) {\r\n                                    newCronJobs.set(uid, job2);\r\n                                    node.debug(\"new - \" + uid);\r\n                                }\r\n                                else if (startedCronJobs[uid]) {\r\n                                    startedCronJobs[uid].setTime(new CronTime(eventStart));\r\n                                    startedCronJobs[uid].start();\r\n                                    node.context().set('startedCronJobs', startedCronJobs);\r\n                                    node.debug(\"started - \" + uid);\r\n                                }\r\n                            }\r\n                            if (eventEnd > dateNow) {\r\n                                let uid = crypto.MD5(ev.created + ev.summary + \"end\").toString();\r\n                                if (ev.uid) {\r\n                                    uid = ev.uid + \"end\";\r\n                                }\r\n                                possibleUids.push(uid);\r\n                                const event: CalEvent = {\r\n                                    summary: ev.summary,\r\n                                    topic: ev.summary,\r\n                                    id: uid,\r\n                                    location: ev.location,\r\n                                    eventStart: new Date(ev.start),\r\n                                    eventEnd: new Date(ev.end),\r\n                                    description: ev.description,\r\n                                    calendarName: ev.calendarName, \r\n                                    countdown: countdown(new Date(ev.start))\r\n                                }\r\n\r\n                                if (config.offset) {\r\n                                    eventStart.setMinutes(eventEnd.getMinutes() + parseInt(config.offset));\r\n                                } else {\r\n                                    eventStart.setMinutes(eventEnd.getMinutes() - 1);\r\n                                }\r\n\r\n                                const job2 = new CronJob(eventEnd, cronJobEnd.bind(null, event, node));\r\n                                let startedCronJobs = node.context().get('startedCronJobs') || {};\r\n                                if (!newCronJobs.has(uid) && !startedCronJobs[uid]) {\r\n                                    newCronJobs.set(uid, job2);\r\n                                    node.debug(\"new - \" + uid);\r\n                                }\r\n                                else if (startedCronJobs[uid]) {\r\n                                    startedCronJobs[uid].setTime(new CronTime(eventEnd));\r\n                                    startedCronJobs[uid].start();\r\n                                    node.context().set('startedCronJobs', startedCronJobs);\r\n                                    node.debug(\"started - \" + uid);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (newCronJobs) {\r\n                    newCronJobs.forEach((job, key) => {\r\n                        try {\r\n                            job.start();\r\n                            node.debug(\"starting - \" + key);\r\n                            var startedCronJobs = node.context().get('startedCronJobs') || {};\r\n                            startedCronJobs[key] = job;\r\n                            node.context().set('startedCronJobs', startedCronJobs);\r\n                        } catch (newCronErr) {\r\n                            node.error(newCronErr);\r\n                        }\r\n\r\n                    });\r\n                }\r\n\r\n                newCronJobs.clear();\r\n            }\r\n            var startedCronJobs = node.context().get('startedCronJobs');\r\n            for (let key in startedCronJobs) {\r\n                if (startedCronJobs.hasOwnProperty(key)) {\r\n                    if (startedCronJobs[key].running == false) {\r\n                        delete startedCronJobs[key];\r\n                    }\r\n                    else if (!(possibleUids.includes(key, 0))) {\r\n                        startedCronJobs[key].stop();\r\n                        delete startedCronJobs[key];\r\n                    }\r\n                }\r\n            }\r\n            node.context().set('startedCronJobs', startedCronJobs);\r\n            //possibleUids.length = 0;\r\n        });\r\n    }\r\n\r\n    function cronJobStart(event: any, node: Node) {\r\n        node.send([{\r\n            payload: event\r\n        }, null]);\r\n    }\r\n\r\n    function cronJobEnd(event: any, node: Node) {\r\n        node.send([null, {\r\n            payload: event\r\n        }]);\r\n    }\r\n\r\n    RED.nodes.registerType(\"ical-events\", eventsNode);\r\n}"]}