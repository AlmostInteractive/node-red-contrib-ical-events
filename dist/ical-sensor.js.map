{"version":3,"sources":["../src/ical-sensor.ts"],"names":[],"mappings":"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","file":"ical-sensor.js","sourcesContent":["\r\nimport { Red, Node } from 'node-red';\r\nimport * as crypto from \"crypto-js\";\r\nimport { CronJob } from 'cron';\r\nimport { Config } from './ical-config';\r\nimport { getICal, CalEvent, countdown, addOffset, getTimezoneOffset } from './helper';\r\nvar RRule = require('rrule').RRule;\r\nvar ce = require('cloneextend');\r\n\r\nmodule.exports = function (RED: Red) {\r\n    function sensorNode(config: any) {\r\n        RED.nodes.createNode(this, config);\r\n        let configNode = RED.nodes.getNode(config.confignode) as unknown as Config;\r\n        let node = this;\r\n        node.trigger = config.trigger;\r\n        node.filter = config.filter;\r\n        this.config = configNode;\r\n\r\n        try {\r\n            node.on('input', () => {\r\n                cronCheckJob(this, config);\r\n            });\r\n\r\n            if (config.timeout && config.timeout !== \"\" && config.timeoutUnits && config.timeoutUnits !== \"\") {\r\n                let cron = '0 0 * * * *';\r\n\r\n                switch (config.timeoutUnits) {\r\n                    case 'seconds':\r\n                        cron = `*/${config.timeout} * * * * *`;\r\n                        break;\r\n                    case 'minutes':\r\n                        cron = `0 */${config.timeout} * * * *`;\r\n                        break;\r\n                    case 'hours':\r\n                        cron = `0 0 */${config.timeout} * * *`;\r\n                        break;\r\n                    case 'days':\r\n                        cron = `0 0 0 */${config.timeout} * *`;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                node.job = new CronJob(cron, cronCheckJob.bind(null, node, config));\r\n                node.job.start();\r\n\r\n                node.on('close', () => {\r\n                    node.job.stop();\r\n                });\r\n            }\r\n\r\n            cronCheckJob(this, config);\r\n        }\r\n        catch (err) {\r\n            node.error('Error: ' + err.message);\r\n            node.status({ fill: \"red\", shape: \"ring\", text: err.message })\r\n        }\r\n    }\r\n\r\n    function processRRule(ev, node,dateNow) {\r\n        var eventLength = ev.end.getTime() - ev.start.getTime();\r\n\r\n        var options = RRule.parseString(ev.rrule.toString());\r\n        options.dtstart = addOffset(ev.start, -getTimezoneOffset(ev.start));\r\n        if (options.until) {\r\n            options.until = addOffset(options.until, -getTimezoneOffset(options.until));\r\n        }\r\n        //node.debug('options:' + JSON.stringify(options));\r\n\r\n        var rule = new RRule(options);\r\n        var now2 = new Date();\r\n        now2.setHours(0, 0, 0, 0);\r\n        var now3 = new Date(now2.getTime() - eventLength);\r\n        if (now2 < now3) now3 = now2;\r\n\r\n        var dates = [];\r\n        try {\r\n            dates = rule.between(now3, addOffset(new Date(), 24 * 60), true);\r\n        } catch (e) {\r\n            node.error(\r\n                'Issue detected in RRule, event ignored; ' +\r\n                e.stack +\r\n                '\\n' +\r\n                'RRule object: ' +\r\n                JSON.stringify(rule) +\r\n                '\\n' +\r\n                'now3: ' +\r\n                now3 +\r\n                '\\n' +\r\n                'string: ' +\r\n                ev.rrule.toString() +\r\n                '\\n' +\r\n                'options: ' +\r\n                JSON.stringify(options)\r\n            );\r\n        }\r\n\r\n        node.debug('dates:' + JSON.stringify(dates));\r\n\r\n        if (dates.length > 0) {\r\n            for (var i = 0; i < dates.length; i++) {\r\n                var ev2 = ce.clone(ev);\r\n                var start = dates[i];\r\n                ev2.start = addOffset(start, getTimezoneOffset(start));\r\n\r\n                var end = new Date(start.getTime() + eventLength);\r\n                ev2.end = addOffset(end, getTimezoneOffset(end));\r\n\r\n                node.debug('   ' + i + ': Event (' + JSON.stringify(ev2.exdate) + '):' + ev2.start.toString() + ' ' + ev2.end.toString());\r\n\r\n                var checkDate = true;\r\n                if (ev2.exdate) {\r\n                    for (var d in ev2.exdate) {\r\n                        if (new Date(d).getTime() === ev2.start.getTime()) {\r\n                            checkDate = false;\r\n                            node.debug('   ' + i + ': sort out');\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (checkDate && ev.recurrences) {\r\n                    for (var dOri in ev.recurrences) {\r\n                        if (new Date(dOri).getTime() === ev2.start.getTime()) {\r\n                            ev2 = ce.clone(ev.recurrences[dOri]);\r\n                            node.debug('   ' + i + ': different recurring found replaced with Event:' + ev2.start + ' ' + ev2.end);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (checkDate && ev2.start <= dateNow && ev2.end >= dateNow) {\r\n                    return ev2;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function cronCheckJob(node: any, config: any) {\r\n        if (node.job && node.job.running) {\r\n            node.status({ fill: \"green\", shape: \"dot\", text: node.job.nextDate().toISOString() });\r\n        }\r\n        else {\r\n            node.status({});\r\n        }\r\n\r\n        var dateNow = new Date();\r\n        getICal(node, node.config.url, node.config, (err, data) => {\r\n            if (err || !data) {\r\n                return;\r\n            }\r\n\r\n            node.debug('Ical read successfully ' + config.url);\r\n            if (!data) return;\r\n\r\n            let current = false;\r\n            let last = node.context().get('on');\r\n\r\n            for (let k in data) {\r\n                if (data.hasOwnProperty(k)) {\r\n                    let ev = data[k];\r\n                    //delete data[k];\r\n                    if (ev.type == 'VEVENT') {\r\n                        let ev2;\r\n                        if (ev.rrule !== undefined) {\r\n                           // console.log(`${ev.summary} \"rrule\"`)\r\n                            ev2 = ce.clone(processRRule(ev, node,dateNow));\r\n                        }\r\n                        if (ev2) {\r\n                            //console.log(ev2)\r\n                            ev = ev2\r\n                           // console.log(`${ev.summary} \"rrule\"`)\r\n                        }\r\n\r\n                        const eventStart = new Date(ev.start);\r\n                        const eventEnd = new Date(ev.end);\r\n\r\n                        if (eventStart <= dateNow && eventEnd >= dateNow) {\r\n\r\n                            let output = false;\r\n                            if (node.trigger == 'match') {\r\n                                let regex = new RegExp(node.filter)\r\n                                if (regex.test(ev.summary)) output = true;\r\n                            } else if (node.trigger == 'nomatch') {\r\n                                let regex = new RegExp(node.filter)\r\n                                if (!regex.test(ev.summary)) output = true;\r\n                            } else {\r\n                                output = true;\r\n                            }\r\n\r\n\r\n                            let uid = crypto.MD5(ev.created + ev.summary).toString();\r\n                            if (ev.uid) {\r\n                                uid = ev.uid;\r\n                            }\r\n\r\n                            let event: CalEvent = {\r\n                                on: false\r\n                            }\r\n\r\n                            if (output) {\r\n                                event = {\r\n                                    summary: ev.summary,\r\n                                    topic: ev.summary,\r\n                                    id: uid,\r\n                                    location: ev.location,\r\n                                    eventStart: new Date(ev.start),\r\n                                    eventEnd: new Date(ev.end),\r\n                                    description: ev.description,\r\n                                    on: true,\r\n                                    calendarName: ev.calendarName,\r\n                                    countdown: countdown(new Date(ev.start))\r\n                                }\r\n                            }\r\n\r\n                            node.send({\r\n                                payload: event\r\n                            });\r\n                            current = true;\r\n\r\n                            if (last != current) {\r\n                                node.send([null, {\r\n                                    payload: event\r\n                                }]);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!current) {\r\n                const event = {\r\n                    on: false\r\n                }\r\n\r\n                node.send({\r\n                    payload: event\r\n                });\r\n\r\n                if (last != current) {\r\n                    node.send([null, {\r\n                        payload: event\r\n                    }]);\r\n                }\r\n            }\r\n\r\n            node.context().set('on', current);\r\n\r\n        });\r\n    }\r\n\r\n    RED.nodes.registerType(\"ical-sensor\", sensorNode);\r\n}"]}