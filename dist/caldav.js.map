{"version":3,"sources":["../src/caldav.ts"],"names":[],"mappings":";;AAEA,IAAM,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;AAC3B,IAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AACjC,IAAM,YAAY,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAC9C,gCAAmC;AACnC,mCAAyC;AAEzC,SAAgB,MAAM,CAAC,IAAI,EAAE,MAAc;IACvC,IAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC;IAChC,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,IAAI,CAAC,CAAC;IACvC,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,IAAI,CAAC,CAAC;IAE3C,IAAI,SAAS,GAAG,MAAM,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC1E,IAAI,OAAO,GAAG,MAAM,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IACnE,IAAM,OAAO,GAAG,CAAC;YACb,IAAI,EAAE,aAAa;YACnB,KAAK,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE;YAC5B,QAAQ,EAAE,CAAC;oBACP,IAAI,EAAE,aAAa;oBACnB,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;oBACzB,QAAQ,EAAE,CAAC;4BACP,IAAI,EAAE,YAAY;4BAClB,KAAK,EAAE;gCACH,KAAK,EAAE,SAAS,CAAC,MAAM,CAAC,sBAAsB,CAAC;gCAC/C,GAAG,EAAE,OAAO,CAAC,MAAM,CAAC,sBAAsB,CAAC;6BAC9C;yBACJ,CAAC;iBACL,CAAC;SACL,CAAC,CAAC;IAEH,IAAM,GAAG,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,KAAK,CAC/B,IAAI,GAAG,CAAC,WAAW,CAAC;QAChB,QAAQ,EAAE,MAAM,CAAC,QAAQ;QACzB,QAAQ,EAAE,MAAM,CAAC,QAAQ;KAC5B,CAAC,CACL,CAAC;IAEF,IAAI,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC;IAC3B,IAAI,GAAG,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC;IAC7B,OAAO,GAAG,CAAC,aAAa,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,EAAE,GAAG,EAAE,eAAe,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;SAC9F,IAAI,CAAC,UAAC,OAAO;QACV,IAAI,QAAQ,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;YACpB,IAAI,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;YAC5C,OAAO;SACV;gCAEQ,QAAQ;YAEb,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,KAAK,QAAQ,CAAC,WAAW,CAAC,EAAE;gBAChG,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;qBAC1E,IAAI,CAAC,UAAC,eAAe;oBAClB,IAAI,UAAU,GAAG,EAAE,CAAC;oBACpB,KAA0B,UAAe,EAAf,mCAAe,EAAf,6BAAe,EAAf,IAAe,EAAE;wBAAtC,IAAI,aAAa,wBAAA;wBAClB,IAAM,GAAG,GAAG,aAAa,CAAC,YAAY,CAAC;wBACvC,IAAI,GAAG,EAAE;4BACL,IAAM,YAAY,GAAG,IAAI,YAAY,CAAC,EAAE,GAAG,KAAA,EAAE,aAAa,EAAE,GAAG,EAAE,CAAC,CAAC;4BACnE,IAAM,MAAM,GAAG,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;4BAE1E,sBAAa,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAA,KAAK;gCAC/B,KAAK,CAAC,YAAY,GAAG,QAAQ,CAAC,WAAW,CAAC;gCAC1C,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;4BAClC,CAAC,CAAC,CAAC;yBACN;qBACJ;oBACD,OAAO,UAAU,CAAC;gBACtB,CAAC,CAAC,CACL,CAAC;gBAEF,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;qBAC1E,IAAI,CAAC,UAAC,eAAe;oBAClB,IAAI,UAAU,GAAG,EAAE,CAAC;oBACpB,KAA0B,UAAe,EAAf,mCAAe,EAAf,6BAAe,EAAf,IAAe,EAAE;wBAAtC,IAAI,aAAa,wBAAA;wBAClB,IAAI,aAAa,CAAC,QAAQ,CAAC,OAAO,EAAE;4BAChC,KAA2B,UAA8B,EAA9B,KAAA,aAAa,CAAC,QAAQ,CAAC,OAAO,EAA9B,cAA8B,EAA9B,IAA8B,EAAE;gCAAtD,IAAI,cAAc,SAAA;gCACnB,IAAI,cAAc,CAAC,IAAI,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE;oCACjD,IAAI,GAAG,GAAG,GAAG,CAAC,MAAM,GAAG,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC;oCAChD,IAAI,MAAM,GAAG,EAAE,CAAC;oCAChB,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;oCACpC,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;oCACpC,IAAI,QAAQ,IAAI,QAAQ,EAAE;wCACtB,IAAI,IAAI,GAAG,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,QAAQ,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;wCAChF,MAAM,GAAG;4CACL,OAAO,EAAE;gDACL,eAAe,EAAE,IAAI;6CACxB;yCACJ,CAAC;qCACL;oCAED,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,UAAA,IAAI;wCACtC,KAAK,IAAI,CAAC,IAAI,IAAI,EAAE;4CAChB,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;4CACjB,EAAE,CAAC,YAAY,GAAG,QAAQ,CAAC,WAAW,CAAC;4CACvC,UAAU,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;yCAC3B;wCACD,OAAO,UAAU,CAAC;oCACtB,CAAC,CAAC,CAAC;iCACN;6BACJ;yBACJ;qBACJ;gBACL,CAAC,CAAC,CACL,CAAC;aACL;;QAxDL,KAAqB,UAAiB,EAAjB,KAAA,OAAO,CAAC,SAAS,EAAjB,cAAiB,EAAjB,IAAiB;YAAjC,IAAI,QAAQ,SAAA;oBAAR,QAAQ;SAyDhB;QACD,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC,EAAE;QACC,IAAI,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;AAEX,CAAC;AAvGD,wBAuGC","file":"caldav.js","sourcesContent":["import { Config } from './ical-config';\r\n\r\nconst dav = require('dav');\r\nconst moment = require('moment');\r\nconst IcalExpander = require('ical-expander');\r\nimport * as  ical from 'node-ical';\r\nimport { convertEvents } from './helper';\r\n\r\nexport function CalDav(node, config: Config) {\r\n    const calName = config.calendar;\r\n    this.pastWeeks = config.pastWeeks || 0;\r\n    this.futureWeeks = config.futureWeeks || 4;\r\n\r\n    let startDate = moment().startOf('day').subtract(this.pastWeeks, 'weeks');\r\n    let endDate = moment().endOf('day').add(this.futureWeeks, 'weeks');\r\n    const filters = [{\r\n        type: 'comp-filter',\r\n        attrs: { name: 'VCALENDAR' },\r\n        children: [{\r\n            type: 'comp-filter',\r\n            attrs: { name: 'VEVENT' },\r\n            children: [{\r\n                type: 'time-range',\r\n                attrs: {\r\n                    start: startDate.format('YYYYMMDD[T]HHmmss[Z]'),\r\n                    end: endDate.format('YYYYMMDD[T]HHmmss[Z]'),\r\n                },\r\n            }],\r\n        }],\r\n    }];\r\n\r\n    const xhr = new dav.transport.Basic(\r\n        new dav.Credentials({\r\n            username: config.username,\r\n            password: config.password,\r\n        }),\r\n    );\r\n\r\n    let calDavUri = config.url;\r\n    let url = new URL(calDavUri);\r\n    return dav.createAccount({ server: calDavUri, xhr: xhr, loadCollections: true, loadObjects: true })\r\n        .then((account) => {\r\n            let promises = [];\r\n            if (!account.calendars) {\r\n                node.error('CalDAV -> no calendars found.');\r\n                return;\r\n            }\r\n\r\n            for (let calendar of account.calendars) {\r\n\r\n                if (!calName || !calName.length || (calName && calName.length && calName === calendar.displayName)) {\r\n                    promises.push(dav.listCalendarObjects(calendar, { xhr: xhr, filters: filters })\r\n                        .then((calendarEntries) => {\r\n                            let retEntries = {};\r\n                            for (let calendarEntry of calendarEntries) {\r\n                                const ics = calendarEntry.calendarData;\r\n                                if (ics) {\r\n                                    const icalExpander = new IcalExpander({ ics, maxIterations: 100 });\r\n                                    const events = icalExpander.between(startDate.toDate(), endDate.toDate());\r\n\r\n                                    convertEvents(events).forEach(event => {\r\n                                        event.calendarName = calendar.displayName;\r\n                                        retEntries[event.uid] = event;\r\n                                    });\r\n                                }\r\n                            }\r\n                            return retEntries;\r\n                        }),\r\n                    );\r\n\r\n                    promises.push(dav.listCalendarObjects(calendar, { xhr: xhr, filters: filters })\r\n                        .then((calendarEntries) => {\r\n                            let retEntries = {};\r\n                            for (let calendarEntry of calendarEntries) {\r\n                                if (calendarEntry.calendar.objects) {\r\n                                    for (let calendarObject of calendarEntry.calendar.objects) {\r\n                                        if (calendarObject.data && calendarObject.data.href) {\r\n                                            let ics = url.origin + calendarObject.data.href;\r\n                                            let header = {};\r\n                                            let username = node.config.username;\r\n                                            let password = node.config.password;\r\n                                            if (username && password) {\r\n                                                var auth = 'Basic ' + Buffer.from(username + ':' + password).toString('base64');\r\n                                                header = {\r\n                                                    headers: {\r\n                                                        'Authorization': auth,\r\n                                                    },\r\n                                                };\r\n                                            }\r\n\r\n                                            return ical.fromURL(ics, header).then(data => {\r\n                                                for (var k in data) {\r\n                                                    var ev = data[k];\r\n                                                    ev.calendarName = calendar.displayName;\r\n                                                    retEntries[ev.uid] = ev;\r\n                                                }\r\n                                                return retEntries;\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }),\r\n                    );\r\n                }\r\n            }\r\n            return Promise.all(promises);\r\n        }, function() {\r\n            node.error('CalDAV -> get calendars went wrong.');\r\n        });\r\n\r\n}\r\n"]}